version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: tollhub-postgres
    environment:
      POSTGRES_DB: tollhub
      POSTGRES_USER: tollhub
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./services/database/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tollhub -d tollhub"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - tollhub-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: tollhub-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - tollhub-network

  # Kafka Message Broker
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: tollhub-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - tollhub-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: tollhub-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - tollhub-network

  # Kong API Gateway
  kong:
    image: kong:3.4-alpine
    container_name: tollhub-kong
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8002:8002"
    volumes:
      - ./infrastructure/kong/kong.yml:/kong/declarative/kong.yml
    depends_on:
      - auth-service
    networks:
      - tollhub-network

  # Authentication Service
  auth-service:
    build:
      context: ./services/auth
      dockerfile: Dockerfile
    container_name: tollhub-auth
    environment:
      NODE_ENV: development
      PORT: 3000
      DATABASE_URL: postgresql://tollhub:password@postgres:5432/tollhub
      REDIS_URL: redis://redis:6379
      KAFKA_BROKERS: kafka:9092
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_EXPIRES_IN: 24h
      JWT_REFRESH_EXPIRES_IN: 7d
      ENCRYPTION_KEY: your-32-character-encryption-key
      STRIPE_SECRET_KEY: sk_test_your_stripe_secret_key
      TWILIO_ACCOUNT_SID: your_twilio_account_sid
      TWILIO_AUTH_TOKEN: your_twilio_auth_token
      SENDGRID_API_KEY: your_sendgrid_api_key
      CORS_ORIGIN: http://localhost:3000,http://localhost:3001
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - tollhub-network

  # User Service
  user-service:
    build:
      context: ./services/user
      dockerfile: Dockerfile
    container_name: tollhub-user
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://tollhub:password@postgres:5432/tollhub
      REDIS_URL: redis://redis:6379
      KAFKA_BROKERS: kafka:9092
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      CORS_ORIGIN: http://localhost:3000,http://localhost:3001
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - tollhub-network

  # Toll Service
  toll-service:
    build:
      context: ./services/toll
      dockerfile: Dockerfile
    container_name: tollhub-toll
    environment:
      NODE_ENV: development
      PORT: 3002
      DATABASE_URL: postgresql://tollhub:password@postgres:5432/tollhub
      REDIS_URL: redis://redis:6379
      KAFKA_BROKERS: kafka:9092
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      CORS_ORIGIN: http://localhost:3000,http://localhost:3001
    ports:
      - "3002:3002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - tollhub-network

  # Statement Service
  statement-service:
    build:
      context: ./services/statement
      dockerfile: Dockerfile
    container_name: tollhub-statement
    environment:
      NODE_ENV: development
      PORT: 3003
      DATABASE_URL: postgresql://tollhub:password@postgres:5432/tollhub
      REDIS_URL: redis://redis:6379
      KAFKA_BROKERS: kafka:9092
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      CORS_ORIGIN: http://localhost:3000,http://localhost:3001
    ports:
      - "3003:3003"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - tollhub-network

  # Agency Service
  agency-service:
    build:
      context: ./services/agency
      dockerfile: Dockerfile
    container_name: tollhub-agency
    environment:
      NODE_ENV: development
      PORT: 3004
      DATABASE_URL: postgresql://tollhub:password@postgres:5432/tollhub
      REDIS_URL: redis://redis:6379
      KAFKA_BROKERS: kafka:9092
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      CORS_ORIGIN: http://localhost:3000,http://localhost:3001
    ports:
      - "3004:3004"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - tollhub-network

  # Web Application
  web-app:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
    container_name: tollhub-web
    environment:
      NODE_ENV: development
      PORT: 3005
      REACT_APP_API_URL: http://localhost:8000
      REACT_APP_AUTH_URL: http://localhost:3000
    ports:
      - "3005:3005"
    depends_on:
      - kong
    networks:
      - tollhub-network

  # Mobile App (React Native)
  mobile-app:
    build:
      context: ./apps/mobile
      dockerfile: Dockerfile
    container_name: tollhub-mobile
    environment:
      NODE_ENV: development
      EXPO_PUBLIC_API_URL: http://localhost:8000
      EXPO_PUBLIC_AUTH_URL: http://localhost:3000
    ports:
      - "3006:3006"
    depends_on:
      - kong
    networks:
      - tollhub-network

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: tollhub-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - tollhub-network

  grafana:
    image: grafana/grafana:latest
    container_name: tollhub-grafana
    ports:
      - "3007:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - tollhub-network

  # Logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: tollhub-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - tollhub-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: tollhub-kibana
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - tollhub-network

volumes:
  postgres_data:
  redis_data:
  grafana_data:
  elasticsearch_data:

networks:
  tollhub-network:
    driver: bridge
